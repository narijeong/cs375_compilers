%{     /* pars1.y    Pascal Parser      Gordon S. Novak Jr.  ; 30 Jul 13   */

/* Copyright (c) 2013 Gordon S. Novak Jr. and
   The University of Texas at Austin. */

/* 14 Feb 01; 01 Oct 04; 02 Mar 07; 27 Feb 08; 24 Jul 09; 02 Aug 12 */

/*
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.

; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.

; You should have received a copy of the GNU General Public License
; along with this program; if not, see <http://www.gnu.org/licenses/>.
  */


/* NOTE:   Copy your lexan.l lexical analyzer to this directory.      */

       /* To use:
                     make pars1y              has 1 shift/reduce conflict
                     pars1y                   execute the parser
                     i:=j .
                     ^D                       control-D to end input

                     pars1y                   execute the parser
                     begin i:=j; if i+j then x:=a+b*c else x:=a*b+c; k:=i end.
                     ^D

                     pars1y                   execute the parser
                     if x+y then if y+z then i:=j else k:=2.
                     ^D

           You may copy pars1.y to be parse.y and extend it for your
           assignment.  Then use   make parser   as above.
        */

        /* Yacc reports 1 shift/reduce conflict, due to the ELSE part of
           the IF statement, but Yacc's default resolves it in the right way.*/

#include <stdio.h>
#include <ctype.h>
#include "token.h"
#include "lexan.h"
#include "symtab.h"
#include "parse.h"

        /* define the type of the Yacc stack element to be TOKEN */

#define YYSTYPE TOKEN

TOKEN parseresult;

%}

/* Order of tokens corresponds to tokendefs.c; do not change */

%token IDENTIFIER STRING NUMBER   /* token types */

%token PLUS MINUS TIMES DIVIDE    /* Operators */
%token ASSIGN EQ NE LT LE GE GT POINT DOT AND OR NOT DIV MOD IN

%token COMMA                      /* Delimiters */
%token SEMICOLON COLON LPAREN RPAREN LBRACKET RBRACKET DOTDOT

%token ARRAY BEGINBEGIN           /* Lex uses BEGIN */
%token CASE CONST DO DOWNTO ELSE END FILEFILE FOR FUNCTION GOTO IF LABEL NIL
%token OF PACKED PROCEDURE PROGRAM RECORD REPEAT SET THEN TO TYPE UNTIL
%token VAR WHILE WITH



%%
// RECORD, 
// instlabel(), 

  program    : PROGRAM IDENTIFIER LPAREN IDENTIFIER RPAREN SEMICOLON lBlock DOT { parseresult = makeprogram($2, $4, $7); }
             ;

  lBlock     : LABEL numlist SEMICOLON cBlock  { $$ = $4; }
             | cBlock                          { $$ = $1; }
             ;

  // numlist just for LABEL
  numlist    : NUMBER COMMA numlist            { instlabel($1); }
             | NUMBER                          { instlabel($1); }
             ;
         
  cBlock     : CONST c_list tBlock             { $$ = $3; }
             | tBlock                          { $$ = $1; }
	     ;


  c_list     : IDENTIFIER EQ NUMBER SEMICOLON c_list { instconst($1, $3); }
             | IDENTIFIER EQ NUMBER SEMICOLON  { instconst($1, $3); }
             ;  

  tBlock     : TYPE tdef_list vBlock           { $$ = $3; }
             | vBlock                          { $$ = $1; }
             ;
  
  tdef_list  : tdef SEMICOLON tdef_list        { $$ = $3; }
             | tdef SEMICOLON                  { $$ = $1; }
             ;

  tdef       : IDENTIFIER EQ type              { insttype($1, $3); }
             ;


  type       : simple_type                     { $$ = $1; }
            // | ARRAY LBRACKET simple_type_list RBRACKET OF type { $$ = instarray($3, $6); }
             | RECORD field_list END           { $$ = instrec($1, $2); }
//	     | POINT IDENTIFIER	               { $$ = instpoint($1, $2); }

             ;

  field_list : fields SEMICOLON fields         { $$ = nconc($1, $3); }         
             | fields SEMICOLON                { $$ = $1; }                         
             ;
 
  fields     : id_list COLON type              { instfields($1, $3); }
             ;

  simple_type: IDENTIFIER                      { $$ = findtype($1); }
             | LPAREN id_list RPAREN           { $$ = instenum($2); }
             ;


  vBlock     : VAR vdef_list block             { $$ = $3; }       
             ;
  block      : BEGINBEGIN statement endpart   { $$ = makeprogn($1,cons($2, $3)); }
             ;

  vdef_list  : vdef SEMICOLON vdef_list        
             | vdef SEMICOLON               
             ;

  vdef       : id_list COLON varType          { instvars($1, findtype($3)); }
             ;

  id_list    : IDENTIFIER COMMA id_list       { $$ = cons($1, $3); }
             | IDENTIFIER                      { $$ = $1; }
             ;

  varType    : IDENTIFIER                      { $$ = $1; }
             ;

  statement  :  BEGINBEGIN statement endpart   { $$ = makeprogn($1,cons($2, $3)); }
             |  IF expr THEN statement endif   { $$ = makeif($1, $2, $4, $5); }
             |  FOR assignment TO IDENTIFIER DO statement { $$ = makefor(1, (TOKEN) talloc(), $2, $4, NULL, NULL, $6); }            
            // |  assignment_list statement      { $$ = cons($1, $2); }
             |  assignment                     { $$ = $1; }
             |  funcCall                       { $$ = $1; }
             |  REPEAT statement_list UNTIL expr {$$ = makerepeat($1, $2, $3, $4);}
             ;

//  assignment_list  : assignment SEMICOLON assignment_list { $$ = cons($1, $3); }
//                   | assignment SEMICOLON        { $$ = $1; }
//                   ;

  statement_list : statement SEMICOLON statement_list{ $$ = cons($1, $3); }
                 | statement                         { $$ = $1; }
                 ;
          
  funcCall   : IDENTIFIER LPAREN expr RPAREN   { $$ = makefuncall((TOKEN) talloc(), $1, $3);}
             ; 

  endpart    :  SEMICOLON statement endpart    { $$ = cons($2, $3); }
             |  END                            { $$ = NULL; }
             ;

  endif      :  ELSE statement                 { $$ = $2; }
             |  /* empty */                    { $$ = NULL; }
             ;

  assignment :  IDENTIFIER ASSIGN expr         { $$ = binop($2, $1, $3); }
             ;

  expr       :  expr PLUS term                 { $$ = binop($2, $1, $3); }
             |  expr MINUS term                { $$ = binop($2, $1, $3); }
             |  term                           { $$ = $1; }
             |  funcCall TIMES funcCall        { $$ = binop($2, $1, $3); }
             |  funcCall                       { $$ = $1; }
             |  term EQ term                   { $$ = binop($2, $1, $3); }
             |  MINUS term                     { $$ = binop($1, $2, $2); }
             ;

  term       :  term TIMES factor              { $$ = binop($2, $1, $3); }
             |  factor                         { $$ = $1; }
             ;

  factor     :  LPAREN expr RPAREN             { $$ = $2; }
             |  IDENTIFIER                     { $$ = $1; }
             |  NUMBER                         { $$ = $1; }                          
             |  STRING                         { $$ = $1; }
             ;

%%

/* You should add your own debugging flags below, and add debugging
   printouts to your programs.

   You will want to change DEBUG to turn off printouts once things
   are working.
  */

#define DEBUG          1             /* set bits here for debugging, 0 = off  */
#define DB_CONS        1             /* bit to trace cons */
#define DB_BINOP       1             /* bit to trace binop */
#define DB_MAKEINTC    1             /* bit to trace makeintc */
#define DB_COPYTOK     1             /* bit to trace copytok */
#define DB_MAKEPROGRAM 1             /* bit to trace makeprogram */
#define DB_MAKEPROGN   1             /* bit to trace makeprogn */
#define DB_MAKEFUNCALL 1             /* bit to trace makefuncall */
#define DB_MAKEGOTO    1             /* bit to trace makegoto */
#define DB_MAKEIF      1             /* bit to trace makeif */
#define DB_MAKEFOR     1             /* bit to trace makefor */
#define DB_MAKELABEL   1             /* bit to trace makelabel */
#define DB_MAKEOP      1             /* bit to trace makeop */
#define DB_PARSERES    1             /* bit to trace parseresult */

 int labelnumber = 0;  /* sequential counter for internal label numbers */
 int label[1000];
   /*  Note: you should add to the above values and insert debugging
       printouts in your routines similar to those that are shown here.     */

/* insttype will install a type name in symbol table.
   typetok is a token containing symbol table pointers. */
void insttype(TOKEN typename, TOKEN typetok) {
//	if (DEBUG & DB_INSTTYPE) {
//		printf("In insttype()\n");
//		dbugprint2args(typename, typetok);
//		printf(" Installing...\n");
//	}
	SYMBOL sym, typesym;
	typesym = typetok->symtype;
	sym = searchins(typename->stringval);
	sym->kind = TYPESYM;
	sym->size = typesym->size;
	sym->datatype = typesym;
	sym->basicdt = typesym->basicdt;
//	if (DEBUG & DB_INSTTYPE) {
//		printf(" ");
//		dbugprinttok(typename);
//		printf(" ");
//		dbprsymbol(sym);
//		printf(" ");
//		dbprsymbol(typesym);
//		printf("\n");
//	}
}


/* makesubrange makes a SUBRANGE symbol table entry, puts the pointer to it
   into tok, and returns tok. */
TOKEN makesubrange(TOKEN tok, int low, int high) {
//	if (DEBUG & DB_MAKESUBRANGE) {
//		printf("In makesubrange()\n");
//		dbugprint1arg(tok);
//		printf("  low bound: %d\n  high bound: %d\n\n", low, high);		
//	}
	if (low > high) {
		printf(" Error: low bound cannot be greater than high bound\n\n");
		return NULL;
	}
	TOKEN out = copytok(tok);
	SYMBOL subrange_entry = symalloc();
	subrange_entry->kind = SUBRANGE;
	subrange_entry->basicdt = INTEGER;
	subrange_entry->lowbound = low;
	subrange_entry->highbound = high;
	subrange_entry->size = basicsizes[INTEGER];
	out->symtype = subrange_entry;
//	if (DEBUG & DB_ADDOFFS) {
//		printf(" Finished makesubrange().\n");
//		dbugprint1tok(out);
//	}	
	
	return out;
}


/* instenum installs an enumerated subrange in the symbol table,
   e.g., type color = (red, white, blue)
   by calling makesubrange and returning the token it returns. */
TOKEN instenum(TOKEN idlist) {
//	if (DEBUG & DB_INSTENUM) {
//		printf("In instenum()\n");
//		dbugprint1arg(idlist);
//	}
	int total_size = 0;
	TOKEN temp = idlist;
	while (temp) {
		instconst(temp, makeintc(total_size));
		total_size++;
		temp = temp->link;
	}
	TOKEN subrange_tok = makesubrange(idlist, 0, (total_size - 1));
//	if (DEBUG & DB_INSTENUM) {
//		printf(" Finished instenum().\n");
//		dbugprint1tok(subrange_tok);
//	}
	return subrange_tok;
}

/* instfields will install type in a list idlist of field name tokens:
   re, im: real    put the pointer to REAL in the RE, IM tokens.
   typetok is a token whose symtype is a symbol table pointer.
   Note that nconc() can be used to combine these lists after instrec() */
TOKEN instfields(TOKEN idlist, TOKEN typetok) {
//	if (DEBUG & DB_INSTFIELDS) {
//		printf("In instfields()\n");
//		printf(" typetok: ");
//		ppexpr(typetok);
//		dbugprinttok(typetok);
//		printf("\n Installing...\n");
//	}
	int next = 0;
	int offset = 0;
	SYMBOL recsym, typesym;
	TOKEN temp = idlist;
	while (temp) {
		typesym = searchst(typetok->stringval);
		recsym = makesym(temp->stringval);
		recsym->datatype = typesym;
		// offset = next; next = next + n;
		offset = next;
		next = next + typesym->size;
		recsym->offset = offset;
		recsym->size = typesym->size;
		recsym->datatype = typesym;
		if (typesym->kind == BASICTYPE) {
			recsym->basicdt = typesym->basicdt;
		}
		temp->symtype = recsym;
//		if (DEBUG & DB_INSTFIELDS) {
//			dbprsymbol(typesym);
//			dbugprintsym(recsym);
//		}
		temp = temp->link;
	}
//	if (DEBUG & DB_INSTFIELDS) {
//		printf(" Finished instfields().\n");
//		printf("\n");
//	}
	return idlist;
}


 /* makerepeat makes structures for a repeat statement.
   tok and tokb are (now) unused tokens that are recycled. */
TOKEN makerepeat(TOKEN tok, TOKEN statements, TOKEN tokb, TOKEN expr){
  int to = labelnumber;
  //making label token
  TOKEN label = makelabel();
  tok = makeprogn(tok, label);
   
  // for the statment 
  TOKEN progn = makeprogn(tokb, statements);
  label->link = progn;
  TOKEN to_tok = makegoto(to);
  TOKEN link_progn = makeprogn((TOKEN) talloc(), NULL);
  link_progn->link = to_tok;

  TOKEN iftok = talloc();
  iftok = makeif(iftok, expr, link_progn, to_tok);
  progn->link = iftok;

  return tok;
}

/* nconc concatenates two token lists, destructively, by making the last link
   of lista point to listb.
   (nconc '(a b) '(c d e))  =  (a b c d e)  */
/* nconc is useful for putting together two fieldlist groups to
   make them into a single list in a record declaration. */
TOKEN nconc(TOKEN lista, TOKEN listb) 
    { 
      TOKEN current = lista;
      while(current->link != NULL) {
        current = current->link;
      }
      current->link = listb;
   // if (DEBUG & DB_NCONC)
       { printf("nconc\n");
         dbugprinttok(lista);
         dbugprinttok(listb);
       };
    return lista;
  }

/* cons links a new item onto the front of a list.  Equivalent to a push.
   (cons 'a '(b c))  =  (a b c)    */
TOKEN cons(TOKEN item, TOKEN list)           
  { item->link = list;
    if (DEBUG & DB_CONS)
       { printf("cons\n");
         dbugprinttok(item);
         dbugprinttok(list);
       };
    return item;
  }

/* binop links a binary operator op to two operands, lhs and rhs. */
TOKEN binop(TOKEN op, TOKEN lhs, TOKEN rhs)        /* reduce binary operator */
  { op->operands = lhs;          /* link operands to operator       */
    lhs->link = rhs;             /* link second operand to first    */
    rhs->link = NULL;            /* terminate operand list          */
    if (DEBUG & DB_BINOP)
       { printf("binop\n");
         dbugprinttok(op);
         dbugprinttok(lhs);
         dbugprinttok(rhs);
       };
    return op;
  }

/* makeop makes a new operator token with operator number opnum.
   Example:  makeop(FLOATOP)  */
TOKEN makeop(int opnum)
{
  TOKEN tok = talloc();
  tok->tokentype = OPERATOR;
  tok->whichval = opnum;
  if (DEBUG & DB_MAKEOP) {
    printf("makeop\n");
    dbugprinttok(tok);
  }
  return(tok);
}

/* makeintc makes a new token with num as its value */
TOKEN makeintc(int num)
{
  TOKEN tok = talloc();
  tok->tokentype = NUMBERTOK;
  tok->datatype = INTEGER;
  tok->intval = num;
  if (DEBUG & DB_MAKEINTC) 
  {
    printf("makeintc\n");
    dbugprinttok(tok);
  }
  return tok;
}

/* copytok makes a new token that is a copy of origtok */
TOKEN copytok(TOKEN origtok)
{
  TOKEN newTok = talloc();
  newTok->tokentype = origtok->tokentype;
  newTok->datatype = origtok->datatype;
  newTok->symtype = origtok->symtype;
  newTok->symentry = origtok->symentry;
  newTok->operands = origtok->operands;
  newTok->link = origtok->link;
  newTok->whichval = origtok->whichval;
  newTok->intval = origtok->intval;
  newTok->realval = origtok->realval;

  if (DEBUG & DB_COPYTOK)
  {
    printf("copytok\n");
    dbugprinttok(newTok);
  }
  return newTok;
}

/* makeif makes an IF operator and links it to its arguments.
   tok is a (now) unused token that is recycled to become an IFOP operator */
TOKEN makeif(TOKEN tok, TOKEN exp, TOKEN thenpart, TOKEN elsepart)
  {  tok->tokentype = OPERATOR; 
     tok->whichval = IFOP;
     if (elsepart != NULL) elsepart->link = NULL;
     thenpart->link = elsepart;
     exp->link = thenpart;
     tok->operands = exp;
     if (DEBUG & DB_MAKEIF)
        { printf("makeif\n");
          dbugprinttok(tok);
          dbugprinttok(exp);
          dbugprinttok(thenpart);
          dbugprinttok(elsepart);
        };
     return tok;
   }

/* makeprogram makes the tree oof the top-level program */
// prog_name: program name identifier, args: argument, block: inside the program
TOKEN makeprogram(TOKEN prog_name, TOKEN args, TOKEN block) 
{
  // create new tokens
  TOKEN program = talloc();
  TOKEN progn = talloc();
  
  program->tokentype = OPERATOR;
  program->whichval = PROGRAMOP;
  program->operands = prog_name;

  progn = makeprogn(progn, args);
  prog_name->link = progn;
  progn->link = block;
  
  if (DEBUG & DB_MAKEPROGRAM)
  { printf("makeprogram\n");
    dbugprinttok(program);
    dbugprinttok(progn);
    dbugprinttok(prog_name);
    dbugprinttok(args);
  };
  
  return program;
}

/* makeprogn makes a PROGN operator and links it to the list of statements.
   tok is a (now) unused token that is recycled. */
TOKEN makeprogn(TOKEN tok, TOKEN statements)
  {  tok->tokentype = OPERATOR;
     tok->whichval = PROGNOP;
     tok->operands = statements;
     if (DEBUG & DB_MAKEPROGN)
       { printf("makeprogn\n");
         dbugprinttok(tok);
         dbugprinttok(statements);
       };
     return tok;
   }

/* makefuncall makes a FUNCALL operator and links it to the fn and args.
   tok is a (now) unused token that is recycled. */
TOKEN makefuncall(TOKEN tok, TOKEN fn, TOKEN args)
{
  
  tok->operands = fn;
  tok->whichval = FUNCALLOP;
  fn->link = args;

  if (DEBUG & DB_MAKEPROGN)
  { 
    printf("makefuncall\n");
    dbugprinttok(tok);
    dbugprinttok(fn);
    dbugprinttok(args);
  };
 
  return tok;
}

/* makefor makes structures for a for statement.
   sign is 1 for normal loop, -1 for downto.
   asg is an assignment statement, e.g. (:= i 1)
   endexpr is the end expression
   tok, tokb and tokc are (now) unused tokens that are recycled. */
TOKEN makefor(int sign, TOKEN tok, TOKEN asg, TOKEN tokb, TOKEN endexpr, 
              TOKEN tokc, TOKEN statement) 
{

// tokb = lim(repeat), id = lim, statement = statement 
// |  FOR assignment TO IDENTIFIER DO statement { $$ = makefor(1, (TOKEN) talloc(), $2, $4, NULL, NULL, $6); }
// assignment = IDENTIFIER ASSIGN expression  -> returns op token with link

  //progn (:=i 0)
  tok = makeprogn(tok, asg);
  
  // create label to link to asg 
  TOKEN label = makelabel();
  asg->link = label;

  TOKEN compare;
  TOKEN incORdec;
  if (sign == 1) 
  {
    compare = makeop(LEOP);
    incORdec = makeop(PLUSOP);
  }
  else {
    compare = makeop(GEOP);
    incORdec = makeop(MINUSOP);
  }

  TOKEN statement_progn = talloc();
  statement_progn = makeprogn(statement_progn, statement);
  
  TOKEN conditionIf =  talloc();
  conditionIf = makeif(conditionIf, compare, statement_progn, NULL);
  label->link = conditionIf;
  
  //TOKEN start_var
  TOKEN start_var = copytok(asg->operands);

  conditionIf->operands = compare;
  compare->operands = start_var;
  //link to end_var (tokb)
  start_var->link = tokb;
  
  // after statement
  //(:=i(+i 1))
  TOKEN assign = makeop(ASSIGNOP);
  TOKEN copy_var1 = copytok(start_var);
  assign->operands = copy_var1;
  copy_var1->link = incORdec;
  TOKEN copy_var2 = copytok(start_var);
  incORdec->operands = copy_var2;
  copy_var2->link = makeintc(1);

  statement->link = assign;
  assign->link = makegoto(labelnumber - 1);


  if (DEBUG & DB_MAKEFOR) 
  {
    printf("makefor\n");
    dbugprinttok(tok);
    dbugprinttok(asg);
    dbugprinttok(tokb);
    dbugprinttok(endexpr);
    dbugprinttok(tokc);
    dbugprinttok(compare);
    dbugprinttok(incORdec);
    dbugprinttok(start_var);
    dbugprinttok(copy_var1);
    dbugprinttok(copy_var2);
  }
  return tok;
}

/* makelabel makes a new label, using labelnumber++ */
TOKEN makelabel()  
{
  TOKEN tok = talloc();
  tok->tokentype = OPERATOR;
  tok->whichval = LABELOP;
  tok->operands = makeintc(labelnumber);
  labelnumber++;
  
  if (DEBUG & DB_MAKELABEL) 
  {
    printf("makelabel\n");
    dbugprinttok(tok);
  }
  return tok;
}

/* instlabel installs a user label into the label table */
void instlabel(TOKEN num) 
{
   label[labelnumber++] = num->intval;
}

/* makegoto makes a GOTO operator to go to the specified label.
   The label number is put into a number token. */
TOKEN makegoto(int label) 
{
  TOKEN tok = talloc();
  tok->tokentype = OPERATOR;
  tok->whichval = GOTOOP;
  tok->operands = makeintc(labelnumber - 1);
 
  if (DEBUG & DB_MAKEGOTO) 
  {
    printf("makegoto\n");
    dbugprinttok(tok);
  }
  return tok;
}


/* findid finds an identifier in the symbol table, sets up symbol table
   pointers, changes a constant to its number equivalent */
TOKEN findid(TOKEN tok)
{
  SYMBOL sym, type;

  sym = searchst(tok->stringval);
  tok->symentry = sym;
  type = sym->datatype;
  tok->symtype = type;
  if ( type->kind == BASICTYPE || type->kind == POINTERSYM )
  {
      tok->datatype = type->basicdt;
  }
  
  return tok;
}

/* instconst installs a constant in the symbol table */
void instconst(TOKEN idtok, TOKEN consttok) 
{
  SYMBOL sym, type; 
  int align;
    if(consttok->datatype == INTEGER)
    {
      type = searchst("integer");	
      //sym->constval.intnum = consttok->intval;

    }
    else if(consttok->datatype == REAL)
    {
      type = searchst("real");
      //sym->constval.realnum = consttok->realval;
    }

    align = alignsize(type);
    sym = insertsym(idtok->stringval);
    sym->kind = CONSTSYM;
    sym->datatype = type;
    sym->size = type->size;
    sym->basicdt = consttok->datatype;
    if(sym->basicdt == INTEGER)
    {
      sym->constval.intnum = consttok->intval;
    }
    else if(sym->basicdt == REAL)
    { 
      sym->constval.realnum = consttok->realval;
    }
}


/* findtype looks up a type name in the symbol table, puts the pointer
   to its type into tok->symtype, returns tok. */
TOKEN findtype(TOKEN tok) {
  SYMBOL sym = searchst(tok->stringval);
  tok->symtype = sym;
  return tok;
}

/* instvars will install variables in symbol table.
   typetok is a token containing symbol table pointer for type. */
void instvars(TOKEN idlist, TOKEN typetok)  
{  
  SYMBOL sym, type; 
  int align;
  type = typetok->symtype;
  align = alignsize(type);
  while ( idlist != NULL )
  {  
    sym = insertsym(idlist->stringval);
    sym->size = type->size;   
    sym->kind = VARSYM;
    sym->offset = wordaddress(blockoffs[blocknumber], align);
    blockoffs[blocknumber] = sym->size + sym->offset;
    sym->datatype = type;
    sym->basicdt = type->basicdt;
    idlist = idlist->link;   
  };
}

/* instrec will install a record definition.  Each token in the linked list
   argstok has a pointer its type.  rectok is just a trash token to be
   used to return the result in its symtype */
TOKEN instrec(TOKEN rectok, TOKEN argstok) {
	int total_size, offset;
	SYMBOL recsym = symalloc();
	recsym->kind = RECORDSYM;
	rectok->symtype = recsym;
	recsym->datatype = argstok->symtype;
	offset = wordaddress(argstok->symtype->size, 8);	// TODO: test this w/ something size 8
	total_size = offset;
	TOKEN curr = argstok;
	TOKEN next = argstok->link;
	while (next) {
		curr->symtype->link = next->symtype;
		offset = wordaddress(next->symtype->size, 8);		
		next->symtype->offset = total_size;
		total_size += offset;
		curr = next;
		next = next->link;
	}
	recsym->size = total_size;
	return rectok;
}

int wordaddress(int n, int wordsize)
  { return ((n + wordsize - 1) / wordsize) * wordsize; }
 
yyerror(s)
  char * s;
  { 
  fputs(s,stderr); putc('\n',stderr);
  }

main()
  { int res;
    initsyms();
    res = yyparse();
    printst();
    printf("yyparse result = %8d\n", res);
    if (DEBUG & DB_PARSERES) dbugprinttok(parseresult);
    ppexpr(parseresult);           /* Pretty-print the result tree */
  }
