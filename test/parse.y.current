%{     /* pars1.y    Pascal Parser      Gordon S. Novak Jr.  ; 30 Jul 13   */

/* Copyright (c) 2013 Gordon S. Novak Jr. and
   The University of Texas at Austin. */

/* 14 Feb 01; 01 Oct 04; 02 Mar 07; 27 Feb 08; 24 Jul 09; 02 Aug 12 */

/*
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.

; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.

; You should have received a copy of the GNU General Public License
; along with this program; if not, see <http://www.gnu.org/licenses/>.
  */


/* NOTE:   Copy your lexan.l lexical analyzer to this directory.      */

       /* To use:
                     make pars1y              has 1 shift/reduce conflict
                     pars1y                   execute the parser
                     i:=j .
                     ^D                       control-D to end input

                     pars1y                   execute the parser
                     begin i:=j; if i+j then x:=a+b*c else x:=a*b+c; k:=i end.
                     ^D

                     pars1y                   execute the parser
                     if x+y then if y+z then i:=j else k:=2.
                     ^D

           You may copy pars1.y to be parse.y and extend it for your
           assignment.  Then use   make parser   as above.
        */

        /* Yacc reports 1 shift/reduce conflict, due to the ELSE part of
           the IF statement, but Yacc's default resolves it in the right way.*/

#include <stdio.h>
#include <ctype.h>
#include "token.h"
#include "lexan.h"
#include "symtab.h"
#include "parse.h"

        /* define the type of the Yacc stack element to be TOKEN */

#define YYSTYPE TOKEN

TOKEN parseresult;

%}

/* Order of tokens corresponds to tokendefs.c; do not change */

%token IDENTIFIER STRING NUMBER   /* token types */

%token PLUS MINUS TIMES DIVIDE    /* Operators */
%token ASSIGN EQ NE LT LE GE GT POINT DOT AND OR NOT DIV MOD IN

%token COMMA                      /* Delimiters */
%token SEMICOLON COLON LPAREN RPAREN LBRACKET RBRACKET DOTDOT

%token ARRAY BEGINBEGIN           /* Lex uses BEGIN */
%token CASE CONST DO DOWNTO ELSE END FILEFILE FOR FUNCTION GOTO IF LABEL NIL
%token OF PACKED PROCEDURE PROGRAM RECORD REPEAT SET THEN TO TYPE UNTIL
%token VAR WHILE WITH


%%

  program    :  PROGRAM IDENTIFIER LPAREN IDENTIFIER RPAREN SEMICOLON block DOT    
                                               { parseresult = any($1, $2, makeprogn($3, $4), $7);}
             ;

  block      :  varBlock
             |  statement
             ;

  type       :  simple_type		       {$$ = $1;}
	     ;
  
  simple_type :  IDENTIFIER		       {$$ = findtype($1);}


  id_list    :  IDENTIFIER COMMA id_list       {$$ = cons($1, $3);}
             |  IDENTIFIER                     {$$ = cons($1, NULL);}
             ;
  
  varBlock   :  VAR vdef_list block            {$$ = $3;}
             ;

  vdef_list  :  vdef SEMICOLON vdef
             |  vdef SEMICOLON
             ;

  vdef       :  id_list COLON type              {instvars($1, $3);}
             ;
           

  statement  :  BEGINBEGIN statement endpart
                                               { $$ = makeprogn($1,cons($2, $3)); }
             |  IF expr THEN statement endif   { $$ = makeif($1, $2, $4, $5); }
             |  assignment
             |  FOR assignment TO expr DO statement	
                                               { $$ = makefor(1, $1, $2, $3, $4, $5, $6);}
             |  funcall
             ;

  funcall    : IDENTIFIER LPAREN expr RPAREN 
                                               { findid($1); $$ = makefuncall($2, $1, $3);}
             ;

  

  endpart    :  SEMICOLON statement endpart    { $$ = cons($2, $3); }
             |  END                            { $$ = NULL; }
             ;
  endif      :  ELSE statement                 { $$ = $2; }
             |  /* empty */                    { $$ = NULL; }
             ;
  assignment :  IDENTIFIER ASSIGN expr         { $$ = binop($2, $1, $3); }
             ;
  expr       :  expr PLUS term                 { $$ = binop($2, $1, $3); }
             |  term 
             |  STRING
             ;
  term       :  term TIMES factor              { $$ = binop($2, $1, $3); }
             |  factor
             ;
  factor     :  LPAREN expr RPAREN             { $$ = $2; }
             |  IDENTIFIER
             |  NUMBER
             ;

%%

/* You should add your own debugging flags below, and add debugging
   printouts to your programs.

   You will want to change DEBUG to turn off printouts once things
   are working.
  */

#define DEBUG        31             /* set bits here for debugging, 0 = off  */
#define DB_CONS       1             /* bit to trace cons */
#define DB_BINOP      2             /* bit to trace binop */
#define DB_MAKEIF     4             /* bit to trace makeif */
#define DB_MAKEPROGN  8             /* bit to trace makeprogn */
#define DB_PARSERES  16             /* bit to trace parseresult */

 int labelnumber = 0;  /* sequential counter for internal label numbers */

   /*  Note: you should add to the above values and insert debugging
       printouts in your routines similar to those that are shown here.     */

TOKEN any(TOKEN program, TOKEN identifier, TOKEN progn, TOKEN block) {

  program->tokentype = OPERATOR;
  program->whichval = PROGRAMOP;

  program->operands = identifier;
  identifier->link = progn;
  progn->link = block;
  
  return program;

}

/* findtype looks up a type name in the symbol table, puts the pointer
   to its type into tok->symtype, returns tok. */
TOKEN findtype(TOKEN tok){
	findid(tok);					//addition for code generator part
	//printf("linking %s to it's type...\n", tok->stringval);
	SYMBOL stype = searchst(tok->stringval);
	tok->symtype = stype;
	//if stype is null then the type isn't a basic type or it hasn't been entered into symbol table yet
	//printf("%s\n", tok->symtype->namestring);
	//printf("high: %d, low: %d\n", stype->highbound, stype->lowbound);
	return tok;
}


/* instvars will install variables in symbol table.
   typetok is a token containing symbol table pointer for type. */
void  instvars(TOKEN id_link, TOKEN typetok)
{
  SYMBOL sym, sym_type; 
  int align;
  sym_type = typetok->symtype;		
  while(id_link != NULL)
  {
    sym = insertsym(id_link->stringval);
    sym->kind = VARSYM;
    sym->offset = wordaddress(blockoffs[blocknumber], align);
    sym->size = sym_type->size;
    sym->datatype = sym_type;
    sym->basicdt = sym_type->basicdt;
    id_link = id_link->link;
  }
}

TOKEN makefor(int sign, TOKEN tok, TOKEN asg, TOKEN tokb, TOKEN endexpr,
              TOKEN tokc, TOKEN statement)
{
	//creating label operator token
	convert(tokb, LABELOP);			//make a new number for the label. use unaryop??
	makeprogn(tok, asg);
	cons(asg, tokb);
	//creating number for label
	TOKEN new = talloc();			//use this for number of label??
	new->tokentype = NUMBERTOK;
	new->datatype = INTEGER;
	new->intval = labelnumber++;
	//connecting label to its number
	unaryop(tokb, new);
	//creating ifop
	TOKEN ifop = talloc();
	ifop->tokentype = OPERATOR;
	ifop->datatype = STRINGTYPE;
	ifop->whichval = IFOP;
	cons(tokb, ifop);
	//creating assignment statement
	TOKEN lteop = talloc();
	lteop->tokentype = OPERATOR;
	lteop->datatype = INTEGER;					//(was stringtype) this needs to be of whatever type it's comparing
	lteop->whichval = LEOP;
	unaryop(ifop, lteop);
	//add operands to LEOP
	TOKEN i = copytoken(asg->operands);
	
	binop(lteop, i, endexpr);
	//connect progn to LEOP
	TOKEN newProgn = makeprogn(copytoken(i), statement);
	newProgn->link = NULL;				//null link left over from copying
	cons(lteop, newProgn);
	
	//part for incrementing loop variable
	TOKEN assignop = copytoken(ifop);
	assignop->whichval = ASSIGNOP;
	//create second operand of incrementation
	TOKEN plusop = copytoken(assignop);
	plusop->whichval = PLUSOP;
	plusop->link = NULL;
	TOKEN one = copytoken(new);
	one->intval = 1;
	binop(plusop, copytoken(i), one);
	binop(assignop, copytoken(i), plusop);
	
	
	TOKEN temp = statement->operands;
	while(temp->link)
		temp = temp->link;
		
	temp->link = assignop;
	
	
	
	//create goto
	TOKEN gotok = copytoken(plusop);
	gotok->whichval = GOTOOP;
	gotok->link = NULL;
	TOKEN zero = copytoken(one);
	zero->intval = labelnumber-1;
	zero->link = NULL;
	zero->operands = NULL;
	gotok->operands = zero;
	cons(assignop, gotok);
	
	return tok;
}

/* makefuncall makes a FUNCALL operator and links it to the fn and args.
   tok is a (now) unused token that is recycled. */
TOKEN makefuncall(TOKEN tok, TOKEN fn, TOKEN args)
{
	TOKEN func;
	func = copytoken(tok);
	func->tokentype = OPERATOR;
	func->datatype = STRINGTYPE;
	func->whichval = FUNCALLOP;
	func->link = NULL;
	
	if(strcmp(fn->stringval, "new") == 0){
		//printf("making new function...\n");
		//create number token for size of allocated memory
		SYMBOL func_symbol = searchst(fn->stringval);
		TOKEN size = copytoken(tok);
		size->tokentype = NUMBERTOK;
		size->datatype = INTEGER;
		size->symtype = searchst("integer");
		size->operands = NULL;
		size->link = NULL;
		size->intval = searchst(args->stringval)->datatype->datatype->datatype->size;
		//printf("%s\n", args->stringval);
		//printf("%d\n", searchst(args->stringval)->datatype->datatype->datatype->size);		//first dt points to pp, next points to person pointer, next points to person??
		fn->link = size;
		func->operands = fn;
		//create an assignop. operand is fn...
		TOKEN assignop = copytoken(size);
		assignop->whichval = ASSIGNOP;
		assignop->tokentype = OPERATOR;
		func->symentry = func_symbol;
		
		return binop(assignop, args, func);
		
	}
	
	else{
		SYMBOL writelni = searchst("writelni");
		//printf("kind: %d\n", writelni->kind);
		SYMBOL writelnf = searchst("writelnf");
		
		//printf("kind: %d\n", writelnf->kind);
		int flag = 0;
		if(!(strcmp(fn->stringval, "writeln")) || !(strcmp(fn->stringval, "write")))
			flag = 1;
		
		//printf("argument type %d\n", args->tokentype);
		fn->link = args;
		func->operands = fn;
		if(args->tokentype == 3 && flag)
			strcpy(fn->stringval, "writelni");
		if(args->tokentype == 0 && flag)
			strcpy(fn->stringval, "writelnf");

		//search symbol table for function. Need to check if arguments need to be coerced
		SYMBOL func_symbol = searchst(fn->stringval);
		int return_type = func_symbol->datatype->basicdt;
		int arg_type = func_symbol->datatype->link->basicdt;
		//printf("\n\nfunction name is %s\n", fn->stringval);
		//printf("function return type = %d\n", return_type);
		//printf("function argument type = %d\n\n", arg_type);
		TOKEN temp = args->operands;
		if(temp){
			while(temp->link){
			//printf("argument type: %d\n", temp->datatype);
			if(temp->datatype != arg_type && !flag){
				int old = temp->intval;
				temp->datatype = arg_type;
				temp->realval = old;
			}
				
			temp = temp->link;
			}
		}
		
		
		func->symentry = func_symbol;
	}
	//printf("args datatype: %d\n", args->datatype);
	return func;
}


TOKEN cons(TOKEN item, TOKEN list)           /* add item to front of list */
  { item->link = list;
    if (DEBUG & DB_CONS)
       { printf("cons\n");
         dbugprinttok(item);
         dbugprinttok(list);
       };
    return item;
  }

TOKEN binop(TOKEN op, TOKEN lhs, TOKEN rhs)        /* reduce binary operator */
  { op->operands = lhs;          /* link operands to operator       */
    lhs->link = rhs;             /* link second operand to first    */
    rhs->link = NULL;            /* terminate operand list          */
    if (DEBUG & DB_BINOP)
       { printf("binop\n");
         dbugprinttok(op);
         dbugprinttok(lhs);
         dbugprinttok(rhs);
       };
    return op;
  }

TOKEN makeif(TOKEN tok, TOKEN exp, TOKEN thenpart, TOKEN elsepart)
  {  tok->tokentype = OPERATOR;  /* Make it look like an operator   */
     tok->whichval = IFOP;
     if (elsepart != NULL) elsepart->link = NULL;
     thenpart->link = elsepart;
     exp->link = thenpart;
     tok->operands = exp;
     if (DEBUG & DB_MAKEIF)
        { printf("makeif\n");
          dbugprinttok(tok);
          dbugprinttok(exp);
          dbugprinttok(thenpart);
          dbugprinttok(elsepart);
        };
     return tok;
   }

TOKEN makeprogn(TOKEN tok, TOKEN statements)
  {  tok->tokentype = OPERATOR;
     tok->whichval = PROGNOP;
     tok->operands = statements;
     if (DEBUG & DB_MAKEPROGN)
       { printf("makeprogn\n");
         dbugprinttok(tok);
         dbugprinttok(statements);
       };
     return tok;
   }

int wordaddress(int n, int wordsize)
  { return ((n + wordsize - 1) / wordsize) * wordsize; }
 
yyerror(s)
  char * s;
  { 
  fputs(s,stderr); putc('\n',stderr);
  }

main()
  { int res;
    initsyms();
    res = yyparse();
    printst();
    printf("yyparse result = %8d\n", res);
    if (DEBUG & DB_PARSERES) dbugprinttok(parseresult);
    ppexpr(parseresult);           /* Pretty-print the result tree */
  }
